Testing: Adventurer card 
------------------------

  #1 draws two extra treasure cards into hand, from player deck
    ++

  #2 the supply of copper is not depleted
    +

  #3 coin count is not altered
    ++

  #4 hand increases by 2
    ++

  #5 the user deck decreases number of non-treasure cards, + treausre cards drawn
    +++

  #6 discard card count increases by cards drawn from deck that are not treasure cards
    +++

  #7 played card count does not increase
    +

  #8 does not change whoseTurn
    +

  #9 does not change outpostPlayed
    +

  #10 does not change phase
    +

  #11 does not change numActions
    +

  #12 does not change numBuys
    +

  #13 does not change numPlayers 
    +

  #14 discard pile is shuffled into deck, if deck is out before treasure is all found 
    ++++

Testing: Embargo card 
------------------------

  #1 adds 2 coins to players coins in play
    +

  #2 does not increase embargo count for coin, if supply choice is out
    +++

  #3 increases embargo count of coin, if supply choice is not out
    +++

  #4 hand count and is decreased by 1, and coins increase only if card is embargoed
    +f+f+

  #5 current card in hand is replaced by last card in hand, if supply choice is not out, and there are multiple cards in hand
    ++

  #6 current card in hand does not change, if supply choice is not out, and player discards last card
    +

  #7 player is left with empty hand, if supply choice is not out, and there is only a single card in hand
    +

  #8 discard card count does not increase
    ++

  #9 played card count does not increase
    +

  #10 does not change whoseTurn
    +

  #11 does not change outpostPlayed
    +

  #12 does not change phase
    +

  #13 does not change numActions
    +

  #14 does not change numBuys
    +

  #15 does not change numPlayers 
    +

  #16 does not change deckCounts 
    ++

Testing: Steward card 
------------------------

  #1 choice 1 draws 2 cards for the player
    +++

  #2 choice 2 adds 2 coins
    +++

  #3 choice 3 discards 2 cards from players hand, of players choice
    +++++++

  #4 plays the current card
    +

  #5 discard card count does not increase
    ++

  #6 does not change whoseTurn
    +

  #7 does not change outpostPlayed
    +

  #8 does not change phase
    +

  #9 does not change numActions
    +

  #10 does not change numBuys
    +

  #11 does not change numPlayers 
    +

  #12 does change deckCount, by removing 2 from deck, if chosen 
    ++

Testing: Smithy card 
------------------------

  #1 draws 3 cards from the players deck, if there are at least 3 cards in deck
    ++

  #2 removes 3 cards from players deck, if there are at least 3 cards in deck
    ++

  #3 re-shuffles player discards into deck, and draws 3 cards, if not enough in deck
    ++++++

  #4 plays the current card
    +++

  #5 discard card count does not increase
    ++

  #6 does not change whoseTurn
    +

  #7 does not change outpostPlayed
    +

  #8 does not change phase
    +

  #9 does not change numActions
    +

  #10 does not change numBuys
    +

  #11 does not change numPlayers 
    +

Testing: buyCard function 
------------------------

  #1 the current player does not have any buys left, returns -1
    +++

  #2 player has buys left, but no cards are left in supply, for card specified returns -1
    +++

  #3 player can buy, and there are enough cards in supply, but player does not have enough coins, returns -1
    +++

  #4 player can buy, and there are enough cards in supply, and the player does have enough coins, adds to discard
    ++++++

  #5 player can buy, and there are enough cards in supply, and the player does have enough coins, hand does not change
    ++

  #6 does not change deckCounts 
    ++

  #7 does not change whoseTurn
    +

  #8 does not change outpostPlayed
    +

  #9 does not change numActions
    +

  #10 does not change numPlayers 
    +

  #11 does not change playedCardCount 
    +

Testing: handCard function 
------------------------

  #1 returns the hand card at position for the current user
    ++++++

  #2 does not return incorrect card at position for the current user
    +++++

  #3 does not change coins
    +

  #4 does not change whoseTurn
    +

  #5 does not change outpostPlayed
    +

  #6 does not change phase
    +

  #7 does not change numActions
    +

  #8 does not change numBuys
    +

  #9 does not change numPlayers 
    +

  #10 does not change playedCardCount 
    +

  #11 does not change handCounts 
    ++

  #12 does not change deckCounts 
    ++

Testing: supplyCount function 
------------------------

  #1 returns the supplyCount, for the card specified
    +++

  #2 does not change coins
    +

  #3 does not change whoseTurn
    +

  #4 does not change outpostPlayed
    +

  #5 does not change phase
    +

  #6 does not change numActions
    +

  #7 does not change numBuys
    +

  #8 does not change numPlayers 
    +

  #9 does not change playedCardCount 
    +

  #10 does not change handCounts 
    ++

  #11 does not change deckCounts 
    ++

  #12 does not change discardCounts 
    ++

Testing: updateCoins function 
------------------------

  #1 adds up treasure card amounts to coin total
    +++++++

  #2 adds bonus amount to treasure total
    +++++++

  #3 returns 0 if no treasure cards in hand
    ++

  #4 does not change whoseTurn
    +

  #5 does not change outpostPlayed
    +

  #6 does not change phase
    +

  #7 does not change numActions
    +

  #8 does not change numBuys
    +

  #9 does not change numPlayers 
    +

  #10 does not change playedCardCount 
    +

  #11 does change handCount 
    ++

  #12 does not change deckCounts 
    ++

  #13 does not change discardCounts 
    ++

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:12.45% of 233
Branches executed:16.02% of 181
Taken at least once:6.08% of 181
Calls executed:14.06% of 64

Function 'getCost'
Lines executed:10.53% of 57
Branches executed:100.00% of 28
Taken at least once:7.14% of 28
No calls

Function 'drawCard'
Lines executed:95.45% of 22
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'gardensFunc'
Lines executed:0.00% of 2
No branches
No calls

Function 'sea_hagFunc'
Lines executed:0.00% of 7
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'outpostFunc'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 1

Function 'smithyFunc'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'adventurerFunc'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:33.33% of 606
Branches executed:38.13% of 417
Taken at least once:24.46% of 417
Calls executed:28.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 252 returned 100% blocks executed 100%
      252:    8:int compare(const void* a, const void* b) {
      252:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:   10:    return 1;
      250:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       66:   12:    return -1;
      184:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function adventurerFunc called 16 returned 100% blocks executed 100%
       16:   37:int adventurerFunc(struct gameState *state, int drawntreasure, int currentPlayer, int temphand[], int z ) {
        -:   38:
        -:   39:      int cardDrawn;
       77:   40:      while(drawntreasure < 2){
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
       45:   41:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        1:   42:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:   43:	}
       45:   44:	drawCard(currentPlayer, state);
call    0 returned 100%
       45:   45:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       45:   46:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       32:   47:	  drawntreasure++;
        -:   48:	else{
       13:   49:	  temphand[z]=cardDrawn;
       13:   50:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       13:   51:	  z++;
        -:   52:	}
        -:   53:      }
       45:   54:      while(z-1>=0){
branch  0 taken 45%
branch  1 taken 55% (fallthrough)
       13:   55:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       13:   56:	z=z-1;
        -:   57:      }
       16:   58:      return 0;
        -:   59:}
        -:   60:
function smithyFunc called 11 returned 100% blocks executed 100%
       11:   61:int smithyFunc(struct gameState *state, int currentPlayer, int handPos, int i) {
        -:   62:
        -:   63:      //+3 Cards
       44:   64:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   65:	{
       33:   66:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:   67:	}
        -:   68:
        -:   69:      //discard card from hand
       11:   70:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11:   71:      return 0;
        -:   72:}
        -:   73:
function outpostFunc called 0 returned 0% blocks executed 0%
    #####:   74:int outpostFunc(struct gameState *state, int currentPlayer, int handPos) {
        -:   75:
        -:   76:      //set outpost flag
    #####:   77:      state->outpostPlayed++;
    #####:   78:      state->outpostPlayed++;
        -:   79:
        -:   80:      //discard card
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   82:      return 0;
        -:   83:}
        -:   84:
function sea_hagFunc called 0 returned 0% blocks executed 0%
    #####:   85:int sea_hagFunc(struct gameState *state, int currentPlayer, int i) {
        -:   86:
    #####:   87:      for (i = 1; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:   88:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:   89:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:   90:	  state->discardCount[i]++;
    #####:   91:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   92:	}
        -:   93:      }
    #####:   94:      return 0;
        -:   95:}
        -:   96:
function gardensFunc called 0 returned 0% blocks executed 0%
    #####:   97:int gardensFunc() {
        -:   98:
    #####:   99:      return -1;
        -:  100:}
        -:  101:
function initializeGame called 8 returned 100% blocks executed 88%
        8:  102:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  103:		   struct gameState *state) {
        -:  104:
        -:  105:  int i;
        -:  106:  int j;
        -:  107:  int it;
        -:  108:  //set up random number generator
        8:  109:  SelectStream(1);
call    0 returned 100%
        8:  110:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  111:
        -:  112:  //check number of players
        8:  113:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:    {
    #####:  115:      return -1;
        -:  116:    }
        -:  117:
        -:  118:  //set number of players
        8:  119:  state->numPlayers = numPlayers;
        -:  120:
        -:  121:  //check selected kingdom cards are different
       88:  122:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  123:    {
      880:  124:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  125:        {
      800:  126:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  127:	    {
    #####:  128:	      return -1;
        -:  129:	    }
        -:  130:        }
        -:  131:    }
        -:  132:
        -:  133:
        -:  134:  //initialize supply
        -:  135:  ///////////////////////////////
        -:  136:
        -:  137:  //set number of Curse cards
        8:  138:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  139:    {
        8:  140:      state->supplyCount[curse] = 10;
        -:  141:    }
    #####:  142:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  143:    {
    #####:  144:      state->supplyCount[curse] = 20;
        -:  145:    }
        -:  146:  else
        -:  147:    {
    #####:  148:      state->supplyCount[curse] = 30;
        -:  149:    }
        -:  150:
        -:  151:  //set number of Victory cards
        8:  152:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  153:    {
        8:  154:      state->supplyCount[estate] = 8;
        8:  155:      state->supplyCount[duchy] = 8;
        8:  156:      state->supplyCount[province] = 8;
        -:  157:    }
        -:  158:  else
        -:  159:    {
    #####:  160:      state->supplyCount[estate] = 12;
    #####:  161:      state->supplyCount[duchy] = 12;
    #####:  162:      state->supplyCount[province] = 12;
        -:  163:    }
        -:  164:
        -:  165:  //set number of Treasure cards
        8:  166:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  167:  state->supplyCount[silver] = 40;
        8:  168:  state->supplyCount[gold] = 30;
        -:  169:
        -:  170:  //set number of Kingdom cards
      168:  171:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  172:    {
     1320:  173:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  174:	{
     1240:  175:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  176:	    {
        -:  177:	      //check if card is a 'Victory' Kingdom card
       80:  178:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  179:		{
       32:  180:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  181:		    state->supplyCount[i] = 8;
        -:  182:		  }
    #####:  183:		  else{ state->supplyCount[i] = 12; }
        -:  184:		}
        -:  185:	      else
        -:  186:		{
       64:  187:		  state->supplyCount[i] = 10;
        -:  188:		}
       80:  189:	      break;
        -:  190:	    }
        -:  191:	  else    //card is not in the set choosen for the game
        -:  192:	    {
     1160:  193:	      state->supplyCount[i] = -1;
        -:  194:	    }
        -:  195:	}
        -:  196:
        -:  197:    }
        -:  198:
        -:  199:  ////////////////////////
        -:  200:  //supply intilization complete
        -:  201:
        -:  202:  //set player decks
       24:  203:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  204:    {
       16:  205:      state->deckCount[i] = 0;
       64:  206:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  207:	{
       48:  208:	  state->deck[i][j] = estate;
       48:  209:	  state->deckCount[i]++;
        -:  210:	}
      128:  211:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  212:	{
      112:  213:	  state->deck[i][j] = copper;
      112:  214:	  state->deckCount[i]++;
        -:  215:	}
        -:  216:    }
        -:  217:
        -:  218:  //shuffle player decks
       24:  219:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  220:    {
       16:  221:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  222:	{
    #####:  223:	  return -1;
        -:  224:	}
        -:  225:    }
        -:  226:
        -:  227:  //draw player hands
       24:  228:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  229:    {
        -:  230:      //initialize hand size to zero
       16:  231:      state->handCount[i] = 0;
       16:  232:      state->discardCount[i] = 0;
        -:  233:      //draw 5 cards
        -:  234:      // for (j = 0; j < 5; j++)
        -:  235:      //	{
        -:  236:      //	  drawCard(i, state);
        -:  237:      //	}
        -:  238:    }
        -:  239:
        -:  240:  //set embargo tokens to 0 for all supply piles
      224:  241:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  242:    {
      216:  243:      state->embargoTokens[i] = 0;
        -:  244:    }
        -:  245:
        -:  246:  //initialize first player's turn
        8:  247:  state->outpostPlayed = 0;
        8:  248:  state->phase = 0;
        8:  249:  state->numActions = 1;
        8:  250:  state->numBuys = 1;
        8:  251:  state->playedCardCount = 0;
        8:  252:  state->whoseTurn = 0;
        8:  253:  state->handCount[state->whoseTurn] = 0;
        -:  254:  //int it; move to top
        -:  255:
        -:  256:  //Moved draw cards to here, only drawing at the start of a turn
       48:  257:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  258:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  259:  }
        -:  260:
        8:  261:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  262:
        8:  263:  return 0;
        -:  264:}
        -:  265:
function shuffle called 19 returned 100% blocks executed 100%
       19:  266:int shuffle(int player, struct gameState *state) {
        -:  267:
        -:  268:
        -:  269:  int newDeck[MAX_DECK];
       19:  270:  int newDeckPos = 0;
        -:  271:  int card;
        -:  272:  int i;
        -:  273:
       19:  274:  if (state->deckCount[player] < 1)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        1:  275:    return -1;
       18:  276:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  277:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  278:
      206:  279:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      170:  280:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      170:  281:    newDeck[newDeckPos] = state->deck[player][card];
      170:  282:    newDeckPos++;
      536:  283:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      366:  284:      state->deck[player][i] = state->deck[player][i+1];
        -:  285:    }
      170:  286:    state->deckCount[player]--;
        -:  287:  }
      188:  288:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      170:  289:    state->deck[player][i] = newDeck[i];
      170:  290:    state->deckCount[player]++;
        -:  291:  }
        -:  292:
       18:  293:  return 0;
        -:  294:}
        -:  295:
function playCard called 0 returned 0% blocks executed 0%
    #####:  296:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  297:{
        -:  298:  int card;
    #####:  299:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  300:
        -:  301:  //check if it is the right phase
    #####:  302:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  303:    {
    #####:  304:      return -1;
        -:  305:    }
        -:  306:
        -:  307:  //check if player has enough actions
    #####:  308:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  309:    {
    #####:  310:      return -1;
        -:  311:    }
        -:  312:
        -:  313:  //get card played
    #####:  314:  card = handCard(handPos, state);
call    0 never executed
        -:  315:
        -:  316:  //check if selected card is an action
    #####:  317:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  318:    {
    #####:  319:      return -1;
        -:  320:    }
        -:  321:
        -:  322:  //play card
    #####:  323:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  324:    {
    #####:  325:      return -1;
        -:  326:    }
        -:  327:
        -:  328:  //reduce number of actions
    #####:  329:  state->numActions--;
        -:  330:
        -:  331:  //update coins (Treasure cards may be added with card draws)
    #####:  332:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  333:
    #####:  334:  return 0;
        -:  335:}
        -:  336:
function buyCard called 11 returned 100% blocks executed 100%
       11:  337:int buyCard(int supplyPos, struct gameState *state) {
        -:  338:  int who;
        -:  339:  if (DEBUG){
        -:  340:    printf("Entering buyCard...\n");
        -:  341:  }
        -:  342:
        -:  343:  // I don't know what to do about the phase thing.
        -:  344:
       11:  345:  who = state->whoseTurn;
        -:  346:
       11:  347:  if (state->numBuys < 1){
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  348:    if (DEBUG)
        -:  349:      printf("You do not have any buys left\n");
        1:  350:    return -1;
       10:  351:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        -:  352:    if (DEBUG)
        -:  353:      printf("There are not any of that type of card left\n");
        1:  354:    return -1;
        9:  355:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
        -:  356:    if (DEBUG)
        -:  357:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  358:    return -1;
        -:  359:  } else {
        8:  360:    state->phase=1;
        -:  361:    //state->supplyCount[supplyPos]--;
        8:  362:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  363:
        8:  364:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        8:  365:    state->numBuys--;
        -:  366:    if (DEBUG)
        -:  367:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  368:  }
        -:  369:
        -:  370:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  371:  //state->discardCount[who]++;
        -:  372:
        8:  373:  return 0;
        -:  374:}
        -:  375:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  376:int numHandCards(struct gameState *state) {
    #####:  377:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  378:}
        -:  379:
function handCard called 21 returned 100% blocks executed 100%
       21:  380:int handCard(int handPos, struct gameState *state) {
       21:  381:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       21:  382:  return state->hand[currentPlayer][handPos];
        -:  383:}
        -:  384:
function supplyCount called 32 returned 100% blocks executed 100%
       32:  385:int supplyCount(int card, struct gameState *state) {
       32:  386:  return state->supplyCount[card];
        -:  387:}
        -:  388:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  389:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  390:  int i;
    #####:  391:  int count = 0;
        -:  392:
    #####:  393:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  394:    {
    #####:  395:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  396:    }
        -:  397:
    #####:  398:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  401:    }
        -:  402:
    #####:  403:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  406:    }
        -:  407:
    #####:  408:  return count;
        -:  409:}
        -:  410:
function whoseTurn called 77 returned 100% blocks executed 100%
       77:  411:int whoseTurn(struct gameState *state) {
       77:  412:  return state->whoseTurn;
        -:  413:}
        -:  414:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  415:int endTurn(struct gameState *state) {
        -:  416:  int k;
        -:  417:  int i;
    #####:  418:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  419:
        -:  420:  //Discard hand
    #####:  421:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  422:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  423:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  424:  }
    #####:  425:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  426:
        -:  427:  //Code for determining the player
    #####:  428:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  429:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  430:  }
        -:  431:  else{
    #####:  432:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  433:  }
        -:  434:
    #####:  435:  state->outpostPlayed = 0;
    #####:  436:  state->phase = 0;
    #####:  437:  state->numActions = 1;
    #####:  438:  state->coins = 0;
    #####:  439:  state->numBuys = 1;
    #####:  440:  state->playedCardCount = 0;
    #####:  441:  state->handCount[state->whoseTurn] = 0;
        -:  442:
        -:  443:  //int k; move to top
        -:  444:  //Next player draws hand
    #####:  445:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  446:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  447:  }
        -:  448:
        -:  449:  //Update money
    #####:  450:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  451:
    #####:  452:  return 0;
        -:  453:}
        -:  454:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  455:int isGameOver(struct gameState *state) {
        -:  456:  int i;
        -:  457:  int j;
        -:  458:
        -:  459:  //if stack of Province cards is empty, the game ends
    #####:  460:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  461:    {
    #####:  462:      return 1;
        -:  463:    }
        -:  464:
        -:  465:  //if three supply pile are at 0, the game ends
    #####:  466:  j = 0;
    #####:  467:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
    #####:  469:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  j++;
        -:  472:	}
        -:  473:    }
    #####:  474:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      return 1;
        -:  477:    }
        -:  478:
    #####:  479:  return 0;
        -:  480:}
        -:  481:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  482:int scoreFor (int player, struct gameState *state) {
        -:  483:
        -:  484:  int i;
    #####:  485:  int score = 0;
        -:  486:  //score from hand
    #####:  487:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  490:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  491:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  492:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  493:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  494:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  495:    }
        -:  496:
        -:  497:  //score from discard
    #####:  498:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  499:    {
    #####:  500:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  501:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  502:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  503:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  504:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  505:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  506:    }
        -:  507:
        -:  508:  //score from deck
    #####:  509:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  512:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  513:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  514:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  515:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  516:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  517:    }
        -:  518:
    #####:  519:  return score;
        -:  520:}
        -:  521:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  522:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  523:  int i;
        -:  524:  int j;
        -:  525:  int highScore;
        -:  526:  int currentPlayer;
        -:  527:
        -:  528:  //get score for each player
    #####:  529:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  530:    {
        -:  531:      //set unused player scores to -9999
    #####:  532:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  533:	{
    #####:  534:	  players[i] = -9999;
        -:  535:	}
        -:  536:      else
        -:  537:	{
    #####:  538:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  539:	}
        -:  540:    }
        -:  541:
        -:  542:  //find highest score
    #####:  543:  j = 0;
    #####:  544:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  545:    {
    #####:  546:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  547:	{
    #####:  548:	  j = i;
        -:  549:	}
        -:  550:    }
    #####:  551:  highScore = players[j];
        -:  552:
        -:  553:  //add 1 to players who had less turns
    #####:  554:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  555:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  556:    {
    #####:  557:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  558:	{
    #####:  559:	  players[i]++;
        -:  560:	}
        -:  561:    }
        -:  562:
        -:  563:  //find new highest score
    #####:  564:  j = 0;
    #####:  565:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  566:    {
    #####:  567:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  568:	{
    #####:  569:	  j = i;
        -:  570:	}
        -:  571:    }
    #####:  572:  highScore = players[j];
        -:  573:
        -:  574:  //set winners in array to 1 and rest to 0
    #####:  575:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  576:    {
    #####:  577:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  578:	{
    #####:  579:	  players[i] = 1;
        -:  580:	}
        -:  581:      else
        -:  582:	{
    #####:  583:	  players[i] = 0;
        -:  584:	}
        -:  585:    }
        -:  586:
    #####:  587:  return 0;
        -:  588:}
        -:  589:
function drawCard called 138 returned 100% blocks executed 92%
      138:  590:int drawCard(int player, struct gameState *state)
        -:  591:{	int count;
        -:  592:  int deckCounter;
      138:  593:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  594:
        -:  595:    //Step 1 Shuffle the discard pile back into a deck
        -:  596:    int i;
        -:  597:    //Move discard to deck
       12:  598:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  599:      state->deck[player][i] = state->discard[player][i];
       10:  600:      state->discard[player][i] = -1;
        -:  601:    }
        -:  602:
        2:  603:    state->deckCount[player] = state->discardCount[player];
        2:  604:    state->discardCount[player] = 0;//Reset discard
        -:  605:
        -:  606:    //Shufffle the deck
        2:  607:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  608:
        -:  609:    if (DEBUG){//Debug statements
        -:  610:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  611:    }
        -:  612:
        2:  613:    state->discardCount[player] = 0;
        -:  614:
        -:  615:    //Step 2 Draw Card
        2:  616:    count = state->handCount[player];//Get current player's hand count
        -:  617:
        -:  618:    if (DEBUG){//Debug statements
        -:  619:      printf("Current hand count: %d\n", count);
        -:  620:    }
        -:  621:
        2:  622:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  623:
        2:  624:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  625:      return -1;
        -:  626:
        2:  627:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  628:    state->deckCount[player]--;
        2:  629:    state->handCount[player]++;//Increment hand count
        -:  630:  }
        -:  631:
        -:  632:  else{
      136:  633:    int count = state->handCount[player];//Get current hand count for player
        -:  634:    int deckCounter;
        -:  635:    if (DEBUG){//Debug statements
        -:  636:      printf("Current hand count: %d\n", count);
        -:  637:    }
        -:  638:
      136:  639:    deckCounter = state->deckCount[player];//Create holder for the deck count
      136:  640:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      136:  641:    state->deckCount[player]--;
      136:  642:    state->handCount[player]++;//Increment hand count
        -:  643:  }
        -:  644:
      138:  645:  return 0;
        -:  646:}
        -:  647:
function getCost called 27 returned 100% blocks executed 13%
       27:  648:int getCost(int cardNumber)
        -:  649:{
       27:  650:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 93%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 7%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  651:    {
    #####:  652:    case curse:
    #####:  653:      return 0;
    #####:  654:    case estate:
    #####:  655:      return 2;
    #####:  656:    case duchy:
    #####:  657:      return 5;
    #####:  658:    case province:
    #####:  659:      return 8;
    #####:  660:    case copper:
    #####:  661:      return 0;
    #####:  662:    case silver:
    #####:  663:      return 3;
    #####:  664:    case gold:
    #####:  665:      return 6;
    #####:  666:    case adventurer:
    #####:  667:      return 6;
    #####:  668:    case council_room:
    #####:  669:      return 5;
    #####:  670:    case feast:
    #####:  671:      return 4;
    #####:  672:    case gardens:
    #####:  673:      return 4;
    #####:  674:    case mine:
    #####:  675:      return 5;
       25:  676:    case remodel:
       25:  677:      return 4;
    #####:  678:    case smithy:
    #####:  679:      return 4;
    #####:  680:    case village:
    #####:  681:      return 3;
        2:  682:    case baron:
        2:  683:      return 4;
    #####:  684:    case great_hall:
    #####:  685:      return 3;
    #####:  686:    case minion:
    #####:  687:      return 5;
    #####:  688:    case steward:
    #####:  689:      return 3;
    #####:  690:    case tribute:
    #####:  691:      return 5;
    #####:  692:    case ambassador:
    #####:  693:      return 3;
    #####:  694:    case cutpurse:
    #####:  695:      return 4;
    #####:  696:    case embargo:
    #####:  697:      return 2;
    #####:  698:    case outpost:
    #####:  699:      return 5;
    #####:  700:    case salvager:
    #####:  701:      return 4;
    #####:  702:    case sea_hag:
    #####:  703:      return 4;
    #####:  704:    case treasure_map:
    #####:  705:      return 4;
        -:  706:    }
        -:  707:
    #####:  708:  return -1;
        -:  709:}
        -:  710:
function cardEffect called 56 returned 100% blocks executed 8%
       56:  711:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  712:{
        -:  713:  int i;
        -:  714:  int j;
        -:  715:  int k;
        -:  716:  int x;
        -:  717:  int index;
       56:  718:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       56:  719:  int nextPlayer = currentPlayer + 1;
        -:  720:
       56:  721:  int tributeRevealedCards[2] = {-1, -1};
        -:  722:  int temphand[MAX_HAND];// moved above the if statement
       56:  723:  int drawntreasure=0;
        -:  724:  int cardDrawn;
       56:  725:  int z = 0;// this is the counter for the temp hand
       56:  726:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  727:    nextPlayer = 0;
        -:  728:  }
        -:  729:
        -:  730:
        -:  731:  //uses switch to select card and perform actions
       56:  732:  switch( card )
branch  0 taken 29%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 21%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 30%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  733:    {
       16:  734:    case adventurer:
       16:  735:    	return adventurerFunc(state, drawntreasure, currentPlayer, temphand, z);
call    0 returned 100%
        -:  736:
    #####:  737:    case council_room:
        -:  738:      //+4 Cards
    #####:  739:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  742:	}
        -:  743:
        -:  744:      //+1 Buy
    #####:  745:      state->numBuys++;
        -:  746:
        -:  747:      //Each other player draws a card
    #####:  748:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  749:	{
    #####:  750:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  751:	    {
    #####:  752:	      drawCard(i, state);
call    0 never executed
        -:  753:	    }
        -:  754:	}
        -:  755:
        -:  756:      //put played card in played card pile
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  758:
    #####:  759:      return 0;
        -:  760:
    #####:  761:    case feast:
        -:  762:      //gain card with cost up to 5
        -:  763:      //Backup hand
    #####:  764:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  765:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  766:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  767:      }
        -:  768:      //Backup hand
        -:  769:
        -:  770:      //Update Coins for Buy
    #####:  771:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  772:      x = 1;//Condition to loop on
    #####:  773:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  774:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	  if (DEBUG)
        -:  776:	    printf("None of that card left, sorry!\n");
        -:  777:
        -:  778:	  if (DEBUG){
        -:  779:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  780:	  }
        -:  781:	}
    #####:  782:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  783:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  784:
        -:  785:	  if (DEBUG){
        -:  786:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  787:	  }
        -:  788:	}
        -:  789:	else{
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  793:	  }
        -:  794:
    #####:  795:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  796:	  x = 0;//No more buying cards
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  800:	  }
        -:  801:
        -:  802:	}
        -:  803:      }
        -:  804:
        -:  805:      //Reset Hand
    #####:  806:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  807:	state->hand[currentPlayer][i] = temphand[i];
    #####:  808:	temphand[i] = -1;
        -:  809:      }
        -:  810:      //Reset Hand
        -:  811:
    #####:  812:      return 0;
        -:  813:
    #####:  814:    case gardens:
    #####:  815:      return gardensFunc();
call    0 never executed
        -:  816:
    #####:  817:    case mine:
    #####:  818:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  819:
    #####:  820:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  821:	{
    #####:  822:	  return -1;
        -:  823:	}
        -:  824:
    #####:  825:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  826:	{
    #####:  827:	  return -1;
        -:  828:	}
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
    #####:  850:      return 0;
        -:  851:
    #####:  852:    case remodel:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  864:
        -:  865:      //discard trashed card
    #####:  866:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  867:	{
    #####:  868:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  869:	    {
    #####:  870:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  871:	      break;
        -:  872:	    }
        -:  873:	}
        -:  874:
        -:  875:
    #####:  876:      return 0;
        -:  877:
       11:  878:    case smithy:
       11:  879:      return smithyFunc(state, currentPlayer, handPos, i);
call    0 returned 100%
        -:  880:
    #####:  881:    case village:
        -:  882:      //+1 Card
    #####:  883:      drawCard(currentPlayer, state);
call    0 never executed
        -:  884:
        -:  885:      //+2 Actions
    #####:  886:      state->numActions = state->numActions + 2;
        -:  887:
        -:  888:      //discard played card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  890:      return 0;
        -:  891:
    #####:  892:    case baron:
    #####:  893:      state->numBuys++;//Increase buys by 1!
    #####:  894:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  895:	int p = 0;//Iterator for hand!
    #####:  896:	int card_not_discarded = 1;//Flag for discard set!
    #####:  897:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  898:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  899:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  900:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  901:	    state->discardCount[currentPlayer]++;
    #####:  902:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  903:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  904:	    }
    #####:  905:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  906:	    state->handCount[currentPlayer]--;
    #####:  907:	    card_not_discarded = 0;//Exit the loop
        -:  908:	  }
    #####:  909:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  910:	    if(DEBUG) {
        -:  911:	      printf("No estate cards in your hand, invalid choice\n");
        -:  912:	      printf("Must gain an estate if there are any\n");
        -:  913:	    }
    #####:  914:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  915:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  916:	      state->supplyCount[estate]--;//Decrement estates
    #####:  917:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  918:		isGameOver(state);
call    0 never executed
        -:  919:	      }
        -:  920:	    }
    #####:  921:	    card_not_discarded = 0;//Exit the loop
        -:  922:	  }
        -:  923:
        -:  924:	  else{
    #####:  925:	    p++;//Next card
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:
        -:  930:      else{
    #####:  931:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  932:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  933:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  934:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:	    isGameOver(state);
call    0 never executed
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:
        -:  940:
    #####:  941:      return 0;
        -:  942:
    #####:  943:    case great_hall:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
call    0 never executed
        -:  946:
        -:  947:      //+1 Actions
    #####:  948:      state->numActions++;
        -:  949:
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  952:      return 0;
        -:  953:
    #####:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:
       12: 1005:    case steward:
       12: 1006:      if (choice1 == 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -: 1007:	{
        -: 1008:	  //+2 cards
       10: 1009:	  drawCard(currentPlayer, state);
call    0 returned 100%
       10: 1010:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1011:	}
        2: 1012:      else if (choice1 == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1013:	{
        -: 1014:	  //+2 coins
        1: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
        1: 1020:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        1: 1021:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1022:	}
        -: 1023:
        -: 1024:      //discard card from hand
       12: 1025:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       12: 1026:      return 0;
        -: 1027:
    #####: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1056:	}
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }
        -: 1064:
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1077:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:
    #####: 1085:      return 0;
        -: 1086:
    #####: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  return -1;
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG)
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:
    #####: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}
    #####: 1166:		      break;
        -: 1167:		    }
        -: 1168:		}
        -: 1169:
        -: 1170:	    }
        -: 1171:
        -: 1172:	}
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:
       17: 1180:    case embargo:
        -: 1181:      //+2 Coins
       17: 1182:      state->coins = state->coins + 2;
        -: 1183:
        -: 1184:      //see if selected pile is in play
       17: 1185:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1186:	{
        2: 1187:	  return -1;
        -: 1188:	}
        -: 1189:
        -: 1190:      //add embargo token to selected supply pile
       15: 1191:      state->embargoTokens[choice1]++;
        -: 1192:
        -: 1193:      //trash card
       15: 1194:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       15: 1195:      return 0;
        -: 1196:
    #####: 1197:    case outpost:
    #####: 1198:        return outpostFunc(state, currentPlayer, handPos);
call    0 never executed
        -: 1199:
    #####: 1200:    case salvager:
        -: 1201:      //+1 buy
    #####: 1202:      state->numBuys++;
        -: 1203:
    #####: 1204:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1210:	}
        -: 1211:
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1214:      return 0;
        -: 1215:
    #####: 1216:    case sea_hag:
    #####: 1217:      return sea_hagFunc(state, currentPlayer, i);
call    0 never executed
        -: 1218:
    #####: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 40 returned 100% blocks executed 100%
       40: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:
        -: 1256:  //if card is not trashed, added to Played pile
       40: 1257:  if (trashFlag < 1)
branch  0 taken 58% (fallthrough)
branch  1 taken 43%
        -: 1258:    {
        -: 1259:      //add card to played pile
       23: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       23: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:
        -: 1264:  //set played card to -1
       40: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:
        -: 1267:  //remove card from player's hand
       40: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 3% (fallthrough)
branch  1 taken 98%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
        1: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
       39: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
        1: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
       38: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
       38: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
       38: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:
       40: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 8 returned 100% blocks executed 70%
        8: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
        8: 1306:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
        8: 1311:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        8: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        8: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:
        -: 1322:  //decrease number in supply pile
        8: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:
        8: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 34 returned 100% blocks executed 100%
       34: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:
        -: 1332:  //reset coin count
       34: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      118: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -: 1337:    {
       84: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -: 1339:	{
       52: 1340:	  state->coins += 1;
        -: 1341:	}
       32: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1343:	{
       10: 1344:	  state->coins += 2;
        -: 1345:	}
       22: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -: 1347:	{
       10: 1348:	  state->coins += 3;
        -: 1349:	}
        -: 1350:    }
        -: 1351:
        -: 1352:  //add bonus
       34: 1353:  state->coins += bonus;
        -: 1354:
       34: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
